// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { ClientDisconnected } from "./client_disconnected_reducer.ts";
export { ClientDisconnected };
import { CreateLayer } from "./create_layer_reducer.ts";
export { CreateLayer };
import { DeleteLayer } from "./delete_layer_reducer.ts";
export { DeleteLayer };
import { RenameLayer } from "./rename_layer_reducer.ts";
export { RenameLayer };
import { SaveLayer } from "./save_layer_reducer.ts";
export { SaveLayer };
import { SendCommand } from "./send_command_reducer.ts";
export { SendCommand };
import { SetName } from "./set_name_reducer.ts";
export { SetName };

// Import and reexport all table handle types
import { CommandTableHandle } from "./command_table.ts";
export { CommandTableHandle };
import { LayerTableHandle } from "./layer_table.ts";
export { LayerTableHandle };
import { UserTableHandle } from "./user_table.ts";
export { UserTableHandle };

// Import and reexport all types
import { Command } from "./command_type.ts";
export { Command };
import { DrawCommand } from "./draw_command_type.ts";
export { DrawCommand };
import { Layer } from "./layer_type.ts";
export { Layer };
import { Point } from "./point_type.ts";
export { Point };
import { StrokeStyle } from "./stroke_style_type.ts";
export { StrokeStyle };
import { User } from "./user_type.ts";
export { User };

const REMOTE_MODULE = {
  tables: {
    command: {
      tableName: "command",
      rowType: Command.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    layer: {
      tableName: "layer",
      rowType: Layer.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    user: {
      tableName: "user",
      rowType: User.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    client_disconnected: {
      reducerName: "client_disconnected",
      argsType: ClientDisconnected.getTypeScriptAlgebraicType(),
    },
    create_layer: {
      reducerName: "create_layer",
      argsType: CreateLayer.getTypeScriptAlgebraicType(),
    },
    delete_layer: {
      reducerName: "delete_layer",
      argsType: DeleteLayer.getTypeScriptAlgebraicType(),
    },
    rename_layer: {
      reducerName: "rename_layer",
      argsType: RenameLayer.getTypeScriptAlgebraicType(),
    },
    save_layer: {
      reducerName: "save_layer",
      argsType: SaveLayer.getTypeScriptAlgebraicType(),
    },
    send_command: {
      reducerName: "send_command",
      argsType: SendCommand.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "ClientDisconnected", args: ClientDisconnected }
| { name: "CreateLayer", args: CreateLayer }
| { name: "DeleteLayer", args: DeleteLayer }
| { name: "RenameLayer", args: RenameLayer }
| { name: "SaveLayer", args: SaveLayer }
| { name: "SendCommand", args: SendCommand }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_disconnected", callback);
  }

  removeOnClientDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_disconnected", callback);
  }

  createLayer() {
    this.connection.callReducer("create_layer", new Uint8Array(0), this.setCallReducerFlags.createLayerFlags);
  }

  onCreateLayer(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("create_layer", callback);
  }

  removeOnCreateLayer(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("create_layer", callback);
  }

  deleteLayer(layer: number) {
    const __args = { layer };
    let __writer = new BinaryWriter(1024);
    DeleteLayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_layer", __argsBuffer, this.setCallReducerFlags.deleteLayerFlags);
  }

  onDeleteLayer(callback: (ctx: ReducerEventContext, layer: number) => void) {
    this.connection.onReducer("delete_layer", callback);
  }

  removeOnDeleteLayer(callback: (ctx: ReducerEventContext, layer: number) => void) {
    this.connection.offReducer("delete_layer", callback);
  }

  renameLayer(layer: number, name: string) {
    const __args = { layer, name };
    let __writer = new BinaryWriter(1024);
    RenameLayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("rename_layer", __argsBuffer, this.setCallReducerFlags.renameLayerFlags);
  }

  onRenameLayer(callback: (ctx: ReducerEventContext, layer: number, name: string) => void) {
    this.connection.onReducer("rename_layer", callback);
  }

  removeOnRenameLayer(callback: (ctx: ReducerEventContext, layer: number, name: string) => void) {
    this.connection.offReducer("rename_layer", callback);
  }

  saveLayer(layer: number, base64: string) {
    const __args = { layer, base64 };
    let __writer = new BinaryWriter(1024);
    SaveLayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("save_layer", __argsBuffer, this.setCallReducerFlags.saveLayerFlags);
  }

  onSaveLayer(callback: (ctx: ReducerEventContext, layer: number, base64: string) => void) {
    this.connection.onReducer("save_layer", callback);
  }

  removeOnSaveLayer(callback: (ctx: ReducerEventContext, layer: number, base64: string) => void) {
    this.connection.offReducer("save_layer", callback);
  }

  sendCommand(layer: number, commands: DrawCommand[]) {
    const __args = { layer, commands };
    let __writer = new BinaryWriter(1024);
    SendCommand.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("send_command", __argsBuffer, this.setCallReducerFlags.sendCommandFlags);
  }

  onSendCommand(callback: (ctx: ReducerEventContext, layer: number, commands: DrawCommand[]) => void) {
    this.connection.onReducer("send_command", callback);
  }

  removeOnSendCommand(callback: (ctx: ReducerEventContext, layer: number, commands: DrawCommand[]) => void) {
    this.connection.offReducer("send_command", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

}

export class SetReducerFlags {
  createLayerFlags: CallReducerFlags = 'FullUpdate';
  createLayer(flags: CallReducerFlags) {
    this.createLayerFlags = flags;
  }

  deleteLayerFlags: CallReducerFlags = 'FullUpdate';
  deleteLayer(flags: CallReducerFlags) {
    this.deleteLayerFlags = flags;
  }

  renameLayerFlags: CallReducerFlags = 'FullUpdate';
  renameLayer(flags: CallReducerFlags) {
    this.renameLayerFlags = flags;
  }

  saveLayerFlags: CallReducerFlags = 'FullUpdate';
  saveLayer(flags: CallReducerFlags) {
    this.saveLayerFlags = flags;
  }

  sendCommandFlags: CallReducerFlags = 'FullUpdate';
  sendCommand(flags: CallReducerFlags) {
    this.sendCommandFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get command(): CommandTableHandle {
    return new CommandTableHandle(this.connection.clientCache.getOrCreateTable<Command>(REMOTE_MODULE.tables.command));
  }

  get layer(): LayerTableHandle {
    return new LayerTableHandle(this.connection.clientCache.getOrCreateTable<Layer>(REMOTE_MODULE.tables.layer));
  }

  get user(): UserTableHandle {
    return new UserTableHandle(this.connection.clientCache.getOrCreateTable<User>(REMOTE_MODULE.tables.user));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
